/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/students": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all students
         * @description Returns a paginated list of students
         */
        get: {
            parameters: {
                query?: {
                    /** @description Cursor for pagination */
                    cursor?: string;
                    /** @description Number of items to return */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Paginated list of students */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["StudentListResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/students/{studentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get student by ID
         * @description Returns a single student
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    studentId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Student details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Student"];
                    };
                };
                /** @description Student not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/positions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all positions
         * @description Returns a paginated list of positions
         */
        get: {
            parameters: {
                query?: {
                    /** @description Cursor for pagination */
                    cursor?: string;
                    /** @description Number of items to return */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Paginated list of positions */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["PositionListResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/positions/{positionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get position by ID
         * @description Returns a single position
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    positionId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Position details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["Position"];
                    };
                };
                /** @description Position not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/highSchools": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all high schools
         * @description Returns a paginated list of high schools
         */
        get: {
            parameters: {
                query?: {
                    /** @description Cursor for pagination */
                    cursor?: string;
                    /** @description Number of items to return */
                    limit?: number;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Paginated list of high schools */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HighSchoolListResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/highSchools/{highSchoolId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get high school by ID
         * @description Returns a single high school
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    highSchoolId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description High school details */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["HighSchool"];
                    };
                };
                /** @description Position not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        StudentListResponse: {
            items?: components["schemas"]["Student"][];
            /** @description Cursor for next page, or null if no more results */
            nextCursor?: string | null;
        };
        PositionListResponse: {
            items?: components["schemas"]["Position"][];
            /** @description Cursor for next page, or null if no more results */
            nextCursor?: string | null;
        };
        HighSchoolListResponse: {
            items?: components["schemas"]["HighSchool"][];
            /** @description Cursor for next page, or null if no more results */
            nextCursor?: string | null;
        };
        Student: {
            /** Format: uuid */
            id: string;
            firstName: string;
            lastName: string;
            graduationYear: number;
            /** Format: email */
            email: string;
            phone: string;
            homeAddress: string;
            /** Format: uuid */
            highSchoolId: string;
        };
        Position: {
            /** Format: uuid */
            id: string;
            company: string;
            address: string;
            /**
             * @description Indicates if the position is onsite, hybrid, or remote
             * @enum {string}
             */
            workLocation?: "onsite" | "hybrid" | "remote";
            /** Format: date */
            startDate?: string | null;
            /** Format: date */
            endDate?: string | null;
            /** @enum {string} */
            status: "active" | "inactive";
            gwLocation: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        HighSchool: {
            /** Format: uuid */
            id: string;
            name: string;
            gwLocation: string;
            address: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
